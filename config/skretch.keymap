#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        OS1 {
            bindings = <&kp LEFT_WIN>;
            key-positions = <15 12>;
            layers = <0>;
        };

        OS2 {
            bindings = <&trans>;
            key-positions = <23 20>;
            layers = <0>;
        };

        Ctrl1 {
            bindings = <&trans>;
            key-positions = <15 14>;
            layers = <0>;
        };

        Ctrl2 {
            bindings = <&trans>;
            key-positions = <20 21>;
            layers = <0>;
        };

        Alt1 {
            bindings = <&trans>;
            key-positions = <15 13>;
            layers = <0>;
        };

        Alt2 {
            bindings = <&trans>;
            key-positions = <20 22>;
            layers = <0>;
        };

        OS_Ctrl1 {
            bindings = <&trans>;
            key-positions = <15 14 12>;
            layers = <0>;
        };

        OS_Ctrl2 {
            bindings = <&trans>;
            key-positions = <20 23 21>;
            layers = <0>;
        };

        OS_Alt1 {
            bindings = <&trans>;
            key-positions = <15 13 12>;
            layers = <0>;
        };

        OS_Alt2 {
            bindings = <&trans>;
            key-positions = <20 22 23>;
            layers = <0>;
        };

        OS_Alt_Ctrl1 {
            bindings = <&trans>;
            key-positions = <15 14 13 12>;
            layers = <0>;
        };

        OS_Alt_Ctrl2 {
            bindings = <&trans>;
            key-positions = <20 21 22 23>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alpha {
            bindings = <
&kp Q  &kp W  &kp E         &kp R      &kp T           &none  &none        &kp Y            &kp U        &kp I    &kp O      &kp P
&kp A  &kp S  &kp D         &kp F      &kp G           &none  &none        &kp H            &kp J        &kp K    &kp L    &kp SQT
&kp Z  &kp Z  &kp C         &kp V      &kp B           &none  &none        &kp N            &kp M    &kp COMMA  &kp DOT  &kp SLASH
       &none  &none  &lt 6 ESCAPE  &lt 4 TAB  &kp LEFT_SHIFT  &none  &lt 1 SPACE  &lt 2 BACKSPACE  &lt 3 ENTER    &none      &none
            >;
        };

        Symbol {
            bindings = <
&kp LEFT_BRACE    &kp AMPERSAND  &kp ASTERISK        &kp LEFT_BRACE        &kp RIGHT_BRACE           &none  &none  &none           &none      &none         &none         &none
     &kp COLON       &kp DOLLAR   &kp PERCENT             &kp CARET               &kp PLUS           &none  &none  &none  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_WIN
     &kp TILDE  &kp EXCLAMATION   &kp AT_SIGN              &kp HASH               &kp PIPE           &none  &none  &none           &none      &none         &none         &none
                          &none         &none  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE  &none  &none           &none      &none         &none         &none
            >;
        };

        Number {
            bindings = <
&kp LEFT_BRACKET  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp RIGHT_BRACKET      &none  &none   &none           &none      &none         &none         &none
   &kp SEMICOLON        &kp N4        &kp N5        &kp N6          &kp EQUAL      &none  &none   &none  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LEFT_WIN
       &kp GRAVE  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3      &kp BACKSLASH      &none  &none   &none           &none      &none         &none         &none
                         &none         &none       &kp DOT       &kp NUMBER_0  &kp MINUS  &none  &trans           &none      &none         &none         &none
            >;
        };

        Function {
            bindings = <
&kp F10  &kp F7  &kp F8  &kp F9       &kp PRINTSCREEN  &none  &none  &bt BT_CLR      &bt BT_NXT      &none         &none    &reset
&kp F11  &kp F4  &kp F5  &kp F6  &kp LS(LG(NUMBER_4))  &none  &none       &none  &kp LEFT_SHIFT  &kp LCTRL  &kp LEFT_ALT  &kp LWIN
&kp F12  &kp F1  &kp F2  &kp F3         &kp LS(LG(A))  &none  &none       &none           &none      &none         &none   &kp DEL
         &trans  &trans   &none                &trans  &none  &none       &none           &none      &none         &none     &none
            >;
        };

        Nav {
            bindings = <
      &trans        &trans     &trans          &trans  &trans  &trans  &trans       &none         &trans         &trans       &trans   &trans
&kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LEFT_SHIFT  &trans  &trans  &trans    &kp LEFT       &kp DOWN         &kp UP    &kp RIGHT   &trans
      &trans        &trans     &trans           &mo 6  &trans  &trans  &trans  &kp INSERT       &kp HOME  &kp PAGE_DOWN  &kp PAGE_UP  &kp END
                    &trans     &trans          &trans  &trans  &trans  &trans      &trans  &kp BACKSPACE     &kp DELETE       &trans   &trans
            >;
        };

        Media {
            bindings = <
      &trans        &trans     &trans      &trans  &trans  &trans  &trans          &trans            &trans           &trans      &trans  &trans
&kp LEFT_WIN  &kp LEFT_ALT  &kp LCTRL  &kp LSHIFT  &trans  &trans  &trans  &kp C_PREVIOUS      &kp C_VOL_DN  &kp C_VOLUME_UP  &kp K_NEXT  &trans
      &trans        &trans     &trans      &trans  &trans  &trans  &trans          &trans            &trans           &trans      &trans  &trans
                    &trans     &trans      &trans  &trans  &trans  &trans      &kp K_STOP  &kp K_PLAY_PAUSE       &kp K_MUTE      &trans  &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans            &trans             &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &mkp MOVE_LEFT    &mkp MOVE_UP    &mkp MOVE_DOWN    &mkp MOVE_RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &mkp SCROLL_LEFT  &mkp SCROLL_UP  &mkp SCROLL_DOWN  &mkp SCROLL_RIGHT  &trans
        &trans  &trans  &trans  &trans  &trans  &trans         &mkp LCLK       &mkp RCLK            &trans             &trans  &trans
            >;
        };
    };
};
